import { useState } from 'react'

export default function ImageUrlTest() {
  const [testUrl, setTestUrl] = useState('')
  const [result, setResult] = useState(null)
  const [loading, setLoading] = useState(false)

  const testImageUrl = async (url) => {
    setLoading(true)
    setResult(null)
    
    try {
      console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º URL:', url)
      
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ fetch
      const fetchResult = await fetch(url, { method: 'HEAD' })
      console.log('HEAD –∑–∞–ø—Ä–æ—Å:', fetchResult.status, fetchResult.statusText)
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Image –æ–±—ä–µ–∫—Ç
      const img = new Image()
      const imgPromise = new Promise((resolve, reject) => {
        img.onload = () => resolve({ success: true, width: img.width, height: img.height })
        img.onerror = (e) => reject({ success: false, error: e })
        img.src = url
      })
      
      const imgResult = await imgPromise
      console.log('Image –∑–∞–≥—Ä—É–∑–∫–∞:', imgResult)
      
      setResult({
        success: true,
        fetchStatus: fetchResult.status,
        fetchStatusText: fetchResult.statusText,
        imageWidth: imgResult.width,
        imageHeight: imgResult.height,
        url: url
      })
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      setResult({
        success: false,
        error: error.message || error.toString(),
        url: url
      })
    } finally {
      setLoading(false)
    }
  }

  const testCurrentImage = () => {
    const url = 'https://afkural.ru/media/gallery/–±–µ—Ä–¥–∏–∫_bnsawFY.jpg'
    setTestUrl(url)
    testImageUrl(url)
  }

  return (
    <div style={{ 
      padding: '20px', 
      border: '2px solid #00b894', 
      margin: '20px 0', 
      backgroundColor: '#f0fff4',
      borderRadius: '8px'
    }}>
      <h3 style={{ color: '#00b894', marginTop: 0 }}>üñºÔ∏è –¢–µ—Å—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
      
      <div style={{ marginBottom: '15px' }}>
        <input
          type="text"
          value={testUrl}
          onChange={(e) => setTestUrl(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
          style={{
            width: '100%',
            padding: '8px',
            border: '1px solid #ddd',
            borderRadius: '4px',
            marginBottom: '10px'
          }}
        />
        <button
          onClick={() => testImageUrl(testUrl)}
          disabled={loading || !testUrl}
          style={{
            padding: '8px 16px',
            backgroundColor: loading ? '#ddd' : '#00b894',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer',
            marginRight: '10px'
          }}
        >
          {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å URL'}
        </button>
        <button
          onClick={testCurrentImage}
          disabled={loading}
          style={{
            padding: '8px 16px',
            backgroundColor: loading ? '#ddd' : '#6c5ce7',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer'
          }}
        >
          –¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        </button>
      </div>
      
      {result && (
        <div style={{
          padding: '15px',
          backgroundColor: result.success ? '#d1f2eb' : '#fadbd8',
          border: `1px solid ${result.success ? '#00b894' : '#e74c3c'}`,
          borderRadius: '5px'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
            <span style={{ fontSize: '20px', marginRight: '10px' }}>
              {result.success ? '‚úÖ' : '‚ùå'}
            </span>
            <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</strong>
          </div>
          
          {result.success ? (
            <div>
              <p><strong>URL:</strong> {result.url}</p>
              <p><strong>HTTP —Å—Ç–∞—Ç—É—Å:</strong> {result.fetchStatus} {result.fetchStatusText}</p>
              <p><strong>–†–∞–∑–º–µ—Ä—ã:</strong> {result.imageWidth}√ó{result.imageHeight}px</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ</p>
            </div>
          ) : (
            <div>
              <p><strong>URL:</strong> {result.url}</p>
              <p><strong>–û—à–∏–±–∫–∞:</strong> {result.error}</p>
              <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
            </div>
          )}
        </div>
      )}
      
      <div style={{ marginTop: '15px', fontSize: '12px', color: '#666' }}>
        <p><strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</p>
      </div>
    </div>
  )
}
